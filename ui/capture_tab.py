from PyQt5.QtWidgets import QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout, QMessageBox
from PyQt5.QtGui import QPixmap, QImage, QKeySequence
from PyQt5.QtCore import Qt, QTimer, QThreadPool
from PyQt5.QtGui import QGuiApplication
from pathlib import Path
from datetime import datetime
import cv2
import logging
from config import CONFIG
from ui.document_cropper import rectify_to_a4
import numpy as np
from config import CAPTURE_DIR

class CaptureTab(QWidget):
    def __init__(self, on_captured):
        super().__init__()

        # --- K√≠ch th∆∞·ªõc preview kh·ªõp m√†n h√¨nh hi·ªán t·∫°i ---
        scr_geo = QGuiApplication.primaryScreen().availableGeometry()
        self.preview_w, self.preview_h = scr_geo.width(), scr_geo.height()

        self.on_captured = on_captured
        self.rotate_deg = 0

        # --- M·ªü webcam ---
        self.cap = cv2.VideoCapture(CONFIG.webcam_index, cv2.CAP_DSHOW)
        if not self.cap.isOpened():
            raise RuntimeError(f"Cannot open webcam {CONFIG.webcam_index}")

        # --- Thi·∫øt l·∫≠p ƒë·ªô ph√¢n gi·∫£i + khoÃÅa manual-exposure ---
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH,  CONFIG.capture_width)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, CONFIG.capture_height)

        # 1) t·∫Øt ho√†n to√†n auto-exposure
        self.cap.set(cv2.CAP_PROP_AUTO_EXPOSURE, 1)     # 1 = Manual (DirectShow)

        # 2) gi·∫£m 1 b∆∞·ªõc exposure (‚âà t·ªëi ƒëi 1 stop)
        self.cap.set(cv2.CAP_PROP_EXPOSURE, -5)         # g·ªëc th∆∞·ªùng l√† ‚Äì5

        # 3) b√π l·∫°i ~0,3-0,5 stop b·∫±ng gain nh·ªè
        self.cap.set(cv2.CAP_PROP_GAIN, 1)

        # (tuÃÄy ch·ªçn) in log ƒë·ªÉ ki·ªÉm ch·ª©ng
        # print("AutoExp =", self.cap.get(cv2.CAP_PROP_AUTO_EXPOSURE))
        # print("Exposure =", self.cap.get(cv2.CAP_PROP_EXPOSURE))
        # print("Gain     =", self.cap.get(cv2.CAP_PROP_GAIN))

        # --- Ph·∫ßn giao di·ªán hi·ªÉn th·ªã ---
        self.view = QLabel(alignment=Qt.AlignCenter)
        self.view.setFixedSize(self.preview_w, self.preview_h)
        self.view.setScaledContents(False)

        self.overlay_lbl = QLabel("", self)
        self.overlay_lbl.setStyleSheet(
            "color:white; background-color:rgba(0,0,0,120); padding:4px;"
        )
        self.overlay_lbl.move(10, 10)
        self.overlay_lbl.setFixedWidth(300)

        self.rot_l_btn  = QPushButton("‚ü≤")
        self.rot_r_btn  = QPushButton("‚ü≥")
        self.capture_btn = QPushButton("üì∏ Capture")

        btn_row = QHBoxLayout()
        btn_row.addWidget(self.rot_l_btn)
        btn_row.addWidget(self.rot_r_btn)
        btn_row.addStretch()
        btn_row.addWidget(self.capture_btn)

        lay = QVBoxLayout(self)
        lay.setAlignment(Qt.AlignCenter)
        lay.addWidget(self.view, 1)
        lay.addLayout(btn_row)

        # --- K·∫øt n·ªëi s·ª± ki·ªán ---
        self.rot_l_btn.clicked.connect(lambda: self._rotate(-90))
        self.rot_r_btn.clicked.connect(lambda: self._rotate(90))
        self.capture_btn.clicked.connect(self._capture)
        self.rot_l_btn.setShortcut(QKeySequence("Ctrl+L"))
        self.rot_r_btn.setShortcut(QKeySequence("Ctrl+R"))

        # --- B·∫Øt ƒë·∫ßu lu·ªìng preview ---
        self.timer = QTimer(self)
        self.timer.timeout.connect(self._update_frame)
        self.timer.start(30)

    def _update_frame(self):
        ret, frame = self.cap.read()
        if not ret:
            return
        frame = self._apply_rotation(frame)
        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb.shape
        qimg = QImage(rgb.data, w, h, ch * w, QImage.Format_RGB888)
        pix = QPixmap.fromImage(qimg)
        self.view.setPixmap(
            pix.scaled(self.view.width(), self.view.height(), Qt.KeepAspectRatio, Qt.SmoothTransformation)
        )

        # C·∫≠p nh·∫≠t overlay th√¥ng tin
        self.overlay_lbl.setText(f"Rotation: {self.rotate_deg}¬∞ | Resolution: {w}x{h}")

    def _apply_rotation(self, frame):
        if self.rotate_deg == 0:
            return frame
        rot_map = {
            90: cv2.ROTATE_90_CLOCKWISE,
            180: cv2.ROTATE_180,
            270: cv2.ROTATE_90_COUNTERCLOCKWISE
        }
        return cv2.rotate(frame, rot_map[self.rotate_deg])

    def _rotate(self, deg: int):
        self.rotate_deg = (self.rotate_deg + deg) % 360

    def _capture(self):
        ret, frame = self.cap.read()
        if not ret:
            return

        # 1Ô∏è‚É£ √°p d·ª•ng g√≥c xoay do ng∆∞·ªùi d√πng ch·ªçn
        frame = self._apply_rotation(frame)                # ‚Üê th√™m d√≤ng n√†y

        # 2Ô∏è‚É£ hi·ªáu ch·ªânh v·ªÅ A4
        try:
            warped, H = rectify_to_a4(frame)
        except RuntimeError as e:
            QMessageBox.warning(self, "Capture error", str(e))
            return

        # 3Ô∏è‚É£ l∆∞u ·∫£nh + homography nh∆∞ tr∆∞·ªõc
        ts   = datetime.now().strftime("%Y%m%d_%H%M%S")
        base = CAPTURE_DIR / f"capture_{ts}"
        img_path = base.with_suffix(".jpg")
        npy_path = base.with_name(base.name + "_H.npy")

        cv2.imwrite(str(img_path), warped,
                    [int(cv2.IMWRITE_JPEG_QUALITY), CONFIG.jpeg_quality])
        np.save(npy_path, H)

        self.on_captured(img_path)